name: "Ubuntu .NET Runtime Tests"

on: push

env: 
  test-results-folder: _test-results
  runtime-deps-image-name: ubuntu/dotnet-runtime-deps:test
  runtime-deps-image-oci-archive: ubuntu_dotnet-runtime-deps_test
  runtime-image-name: ubuntu/dotnet-runtime:test
  runtime-image-oci-archive: ubuntu_dotnet-runtime_test

jobs:
  build:
    runs-on: ubuntu-22.04
    name: Build and Test

    outputs:
      build_status: ${{ steps.set-outputs.outputs.status }}

    steps:
      - uses: actions/checkout@v2

      - name: Prepare working environment for running and collecting test results
        run: |
          mkdir -p ${{ github.workspace }}/${{ env.test-results-folder }}; 
          sudo apt-get update
          sudo apt-get -y install skopeo

      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Lint the .NET runtime deps container image recipe
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: dotnet-runtime-deps/Dockerfile.22.04
          ignore: DL3008,SC2046,DL3015

      - name: Lint the .NET runtime container image recipe
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: dotnet-runtime/Dockerfile.22.04
          ignore: DL3008,SC2046,DL3015,DL3003,DL3006

      - name: Build the .NET runtime deps container image
        run: |
          docker build -t ${{ env.runtime-deps-image-name }} dotnet-runtime-deps -f Dockerfile.22.04 .

      - name: Build the .NET runtime container image
        run: |
          exec &> >(tee ${{ github.workspace }}/${{ env.test-results-folder }}/${{ env.log-file }})
          docker build -t ${{ env.runtime-image-name }} dotnet-runtime -f Dockerfile.22.04 --build-arg RUNTIME_DEPS_IMAGE=${{ env.runtime-deps-image-name }} .

      - name: Collect ${{ env.runtime-deps-image-name }} as an OCI artifact
        run: |
          skopeo copy docker-daemon:${{ env.runtime-deps-image-name }} oci-archive:${{ github.workspace }}/${{ env.test-results-folder }}/${{ env.runtime-deps-image-oci-archive }}

      - name: Collect ${{ env.runtime-image-name }} as an OCI artifact
        run: |
          skopeo copy docker-daemon:${{ env.runtime-image-name }} oci-archive:${{ github.workspace }}/${{ env.test-results-folder }}/${{ env.runtime-image-oci-archive }}

      # TODO: use snyk action instead and get a Snyk token for ROCKs
      # - name: Scan the .NET runtime deps image for vulnerabilities
      #   run: docker scan --accept-license --dependency-tree -f Dockerfile ${{ env.runtime-deps-image-name }} | tee ${{ github.workspace }}/${{ env.test-results-folder }}/vulnerability-scan-output.txt

      - name: Run Tests
        working-directory: ${{ github.workspace }}/tests
        run: |
          ./run-all-tests ${{ env.runtime-deps-image-name }} ${{ env.runtime-image-name }}

      - if: always()
        name: Keep test results
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: ${{ github.workspace }}/${{ env.test-results-folder }}/*
      
      - id: set-outputs
        if: always()
        run: |
          echo "::set-output name=status::${{ job.status }}"

  notify:
    needs:
        - build
    if: always()
    name: Post Workflow Status to Mattermost
    runs-on: ubuntu-latest

    steps:
    - name: Create the Mattermost Message
      run: |
        case "${{ needs.build.outputs.build_status }}" in
          failure) msg_icon=":x:" ;;
          success) msg_icon=":white_check_mark:" ;;
          cancelled) msg_icon=":no_entry_sign:" ;;
          *) msg_icon=":grey_question:" ;;
        esac

        msg=$(cat << EOF
        ##### $msg_icon GitHub Workflow '${{ github.workflow	}}' execution [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) has ended with the status \`${{ needs.build.outputs.build_status }}\`, for:
         - Project: [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})
         - Branch: [${{ github.ref_name }}](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }})
        EOF
        )

        jq -n --arg message "$msg" >mattermost.json '
          {
            text: $message,
          }
        '

    - uses: slackapi/slack-github-action@v1.19.0
      with:
        payload-file-path: "mattermost.json"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.MATTERMOST_ROCKS_DEV_WEBHOOK_URL }}
