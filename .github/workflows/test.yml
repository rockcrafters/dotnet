name: "Ubuntu .NET Runtime Deps Tests"

on: push

env: 
  test-results-folder: _test-results
  test-image-name: ubuntu/dotnet-runtime-deps:test
  test-oci-image-name: ubuntu_dotnet-runtime-deps_test
  log-file: output.log

jobs:
  build:
    runs-on: ubuntu-22.04
    name: Build and Test

    outputs:
      build_status: ${{ steps.set-outputs.outputs.status }}
      build_log: ${{ steps.set-outputs.outputs.log }}

    steps:
      - uses: actions/checkout@v2

      - name: Prepare working environment for running and collecting test results
        run: |
          mkdir -p ${{ github.workspace }}/${{ env.test-results-folder }}; 
          sudo apt-get -y install skopeo

      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Lint the container image recipe
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,SC2046,DL3015

      - name: Build the .NET runtime deps container image
        run: |
          exec &> >(tee ${{ github.workspace }}/${{ env.test-results-folder }}/${{ env.log-file }})
          docker build -t ${{ env.test-image-name }} .

      - name: Collect ${{ env.test-image-name }} as an OCI artifact
        run: |
          exec &> >(tee ${{ github.workspace }}/${{ env.test-results-folder }}/${{ env.log-file }})
          skopeo copy docker-daemon:${{ env.test-image-name }} oci-archive:${{ github.workspace }}/${{ env.test-results-folder }}/${{ env.test-oci-image-name }}

      # TODO: use snyk action instead and get a Snyk token for ROCKs
      # - name: Scan the .NET runtime deps image for vulnerabilities
      #   run: docker scan --accept-license --dependency-tree -f Dockerfile ${{ env.test-image-name }} | tee ${{ github.workspace }}/${{ env.test-results-folder }}/vulnerability-scan-output.txt

      - name: Run Tests
        working-directory: ${{ github.workspace }}/tests
        run: |
          exec &> >(tee l${{ github.workspace }}/${{ env.test-results-folder }}/${{ env.log-file }})
          ./run-all-tests ${{ env.test-image-name }} 

      - if: always()
        name: Keep test results
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: ${{ github.workspace }}/${{ env.test-results-folder }}/*
      
      - id: set-outputs
        if: always()
        run: |
          echo "::set-output name=status::${{ job.status }}"
          raw_logs="$(cat ${{ github.workspace }}/${{ env.test-results-folder }}/${{ env.log-file }})"
          logs="${raw_logs//$'\n'/'%0A'}"
          echo "::set-output name=log::$logs"

  notify:
    needs:
        - build
    if: always()
    name: Post Workflow Status to Mattermost
    runs-on: ubuntu-latest

    steps:
    - name: Create the Mattermost Message
      run: |
        if [ "${{ needs.build.outputs.build_status }}" == "failure" ]
        then
          msg_icon=":x:"
        elif [ "${{ needs.build.outputs.build_status }}" == "success" ]
        then
          msg_icon=":white_check_mark:"
        elif [ "${{ needs.build.outputs.build_status }}" == "cancelled" ]
        then
          msg_icon=":no_entry_sign:"
        else 
          msg_icon=":grey_question:"
        fi

        msg=$(cat << EOF
        #### $msg_icon GitHub Workflow '${{ github.workflow	}}' execution [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) has ended with the status ***${{ needs.build.outputs.build_status }}***, for:\n - Project: [${{ github.repository }}](${{ github.repositoryUrl }})\n - Branch: [${{ github.ref_name }}](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }})
        EOF
        )

        echo "{\"text\":\"$msg\", \"props\": {\"card\": \"${{ needs.build.outputs.build_log }}\"}}" > mattermost.json
    - uses: mattermost/action-mattermost-notify@master
      env:
        MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_ROCKS_DEV_WEBHOOK_URL }}
        MATTERMOST_ICON: https://annaelizabeth2019.github.io/the-rock-paper-scissors-2/images/therock1.jpg
        MATTERMOST_USERNAME: ubuntu-rocks